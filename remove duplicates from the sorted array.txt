 class Solution {
public:
    int removeDuplicates(vector<int>& nums) {

        int n = nums.size();
        set<int> Set;

        for(int i=0;i<n;i++){
            Set.insert(nums[i]);
        }

        int m = Set.size();
        int cnt = 0;

        for(auto x: Set){
            nums[cnt] = x;
            cnt++;
        }
        return m;

    }
};


// Efficient Solution: Time: O(N) :: Aux_Space: O(1)
// We take 2 pointers one at idx 0 and another @ idx 1. 


class Solution {
public:
    int removeDuplicates(vector<int>& nums) {

        int n = nums.size();

        int i=0,j=1;

        while(i<n && j<n){

            if(nums[i] == nums[j]){
                j++;
            }else{
                i++;
                nums[i] = nums[j];
                j++;
            }
        }
        return (i+1);
    }
};

// Efficient Solution: Time: O(N) :: Aux_Space: O(1)

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {

        int n = nums.size();
        int cnt = 0;

        for(int i=1;i<n;i++){
            if(nums[i] == nums[i-1]){
                cnt++;
            }else{
                nums[i-cnt] = nums[i];
            }
        }
        return (n-cnt);
    }
};