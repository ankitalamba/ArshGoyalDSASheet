Brute Force Approach:
Runtime: 8 ms, faster than 41.59% of C++ online submissions for Search Insert Position.
Memory Usage: 9.8 MB, less than 22.99% of C++ online submissions for Search Insert Position.

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int ans=-1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>=target){
                ans=i;
                break;
            }
        }
        if(ans==-1)
            return nums.size();
        return ans;
    }
};
STL Approach:
Runtime: 4 ms, faster than 99.68% of C++ online submissions for Search Insert Position.
Memory Usage: 10 MB, less than 9.77% of C++ online submissions for Search Insert Position.

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        return lower_bound(nums.begin(), nums.end(), target) - nums.begin();
    }
};
Binary Search
Runtime: 8 ms, faster than 94.09% of C++ online submissions for Search Insert Position.
Memory Usage: 9.6 MB, less than 89.09% of C++ online submissions for Search Insert Position.

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size();
        while(left < right){
            int mid = left + (right-left)/2;
            if(nums[mid] >= target){
                right = mid;
            }else{
                left = mid + 1;
            }
        }
        return left;
    }
};
